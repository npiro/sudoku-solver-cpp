// Class automatically generated by Dev-C++ New Class wizard

#include "matriz.h" // class's header file
#include <iostream>
#include <algorithm>

using namespace std;

// class constructor
Matriz::Matriz()
{
    num_casillas_vacias = 81;
    for (int fila = 0;fila<9;fila++) for (int col = 0; col<9; col++) {
        casillas[fila][col] = new Casilla(fila,col);
    }
    for (int i=0;i<9;i++) for (int j=0;j<9;j++) filas[i][j] = this->casillas[i][j];
    for (int i=0;i<9;i++) for (int j=0;j<9;j++) columnas[i][j] = this->casillas[j][i];
    for (int i=0;i<9;i++) for (int j=0;j<9;j++) cuadros[i][j] = this->casillas[(i/3)*3+j/3][(3*i)%9+j%3];
    cout << "Contructor Matriz()\n";

}
// class copy constructor
Matriz::Matriz(const Matriz& m)
{
    num_casillas_vacias = m.num_casillas_vacias;
    for (int fila = 0;fila<9;fila++) for (int col = 0; col<9; col++) {
        casillas[fila][col] = new Casilla(fila,col);
        *casillas[fila][col] = *m.casillas[fila][col];
        //cout << casillas[fila][col] << "\n";
        //cout << m.casillas[fila][col] << "\n";
    }
    for (int i=0;i<9;i++) for (int j=0;j<9;j++) filas[i][j] = casillas[i][j];
    for (int i=0;i<9;i++) for (int j=0;j<9;j++) columnas[i][j] = casillas[j][i];
    for (int i=0;i<9;i++) for (int j=0;j<9;j++) cuadros[i][j] = casillas[int(i/3)*3+int(j/3)][(3*i)%9+j%3];
    //cout << "Copy Controctor Matriz()\n";
}
// class destructor
Matriz::~Matriz()
{
    //cout << "destructor Matriz()\n";
    //delete casillas[9][9];
    delete [] casillas;
}

void Matriz::PonerNumero(int fila, int col, int valor)
{
    casillas[fila][col]->valor = valor;
    casillas[fila][col]->lleno = true;
    num_casillas_vacias--;
    for (int c = 0; c < 9; c++) {
        vector<int> *lista = &filas[fila][c]->valores_posibles;
        vector<int>::iterator nums_iter = find(lista->begin(), lista->end(), valor); // Search the list.
        if (nums_iter != lista->end()) lista->erase(nums_iter);
    }
    for (int f = 0; f < 9; f++) {
        vector<int> *lista = &columnas[col][f]->valores_posibles;
        vector<int>::iterator nums_iter = find(lista->begin(), lista->end(), valor); // Search the list.
        if (nums_iter != lista->end()) lista->erase(nums_iter);
    }
    int cuad = casillas[fila][col]->cuadro;
    //cout << "coord: " << fila << " " << col << " cuardo: " << cuad << "\n";
    for (int cas = 0; cas < 9; cas++) {
        vector<int> *lista = &cuadros[cuad][cas]->valores_posibles;
        vector<int>::iterator nums_iter = find(lista->begin(), lista->end(), valor); // Search the list.
        if (nums_iter != lista->end()) lista->erase(nums_iter);
    }
    //Imprimir();
    //ImprimirValoresPosibles(0,6);
    //getchar();
}

void Matriz::Imprimir(void)
{
    for (int fila = 0;fila < 9;fila++) {
        for (int col = 0;col < 9;col++) {
            cout << casillas[fila][col]->valor << " ";
        }
        cout << "\n";
    }
}

void Matriz::ImprimirValoresPosibles(int fila, int col)
{
    vector<int> *lista = &casillas[fila][col]->valores_posibles;
    vector<int>::iterator iter = lista->begin();
    for (iter = lista->begin();iter<lista->end();iter++) cout << *iter << " ";
    cout << "\n";
}
